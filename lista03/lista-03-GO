package main

import (
	"bufio"
	"fmt"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
)

func main() {
	q27()
}

func q1() {
	var vetor []int
	var k, y int
	N := obterN()
	fmt.Printf("digite os %d números\n", N)
	for i := 0; i < N; i++ {
		fmt.Scan(&k)
		vetor = append(vetor, k)
	}
	fmt.Println("digite o número M representando a qtd de buscas")
	M := obterM()
	for i := 0; i < M; i++ {
		fmt.Println("digite o número que deseja verificar")
		fmt.Scan(&y)
		for u := 0; u < N; u++ {
			if y == vetor[u] {
				fmt.Println("ACHEI")
				break
			}
			if u == N-1 {
				fmt.Println("NAO ACHEI")
				break
			}
		}
	}
}

func obterN() int {
	var N int
	fmt.Println("digite o número N representando o tamanho do vetor")
	fmt.Scanln(&N)
	if N >= 1 && N <= 100000 {
		return N
	}

	fmt.Println("o número deve estar entre 1 e 100000. ")
	return obterN()
}

func obterM() int {
	var M int

	fmt.Scanln(&M)
	if M >= 1 && M <= 1000 {
		return M
	}
	if M < 1 && M > 100000 {
		fmt.Println("o número deve estar entre 1 e 1000. Tente novamente")
		return obterM()
	}
	return obterM()
}

func q2() {
	var vetor []int
	var K, l, contador int
	fmt.Println("digite o número N representando o tamanho do vetor")
	N := obterM()
	fmt.Printf("digite os %d números\n", N)
	for i := 0; i < N; i++ {
		fmt.Scan(&l)
		vetor = append(vetor, l)
	}
	bufio.NewReader(os.Stdin).ReadByte()
	fmt.Println("digite o inteiro K")
	fmt.Scanln(&K)
	for u := 0; u < N; u++ {
		if vetor[u] >= K {
			contador++
		}
	}
	fmt.Println(contador)
}

func q3() {
	var vetor []int
	var l int
	U := obterU()
	fmt.Printf("digite os %d números\n", U)
	for i := 0; i < U; i++ {
		fmt.Scan(&l)
		vetor = append(vetor, l)
	}
	index := len(vetor) - 1
	for {
		fmt.Printf("%v ", vetor[index])
		if index == 0 {
			break
		}
		index--
	}
}

func obterU() int {
	var U int
	fmt.Println("digite o número N representando o tamanho do vetor")
	fmt.Scanln(&U)
	if U >= 1 && U <= 5000 {
		return U
	}

	fmt.Println("o número deve estar entre 1 e 5000. ")
	return obterU()
}

func q4() {
	var vetor []int
	var l int
	U := obterU()
	fmt.Printf("digite os %d números\n", U)
	for i := 0; i < U; i++ {
		fmt.Scan(&l)
		vetor = append(vetor, l)
	}
	index := 0
	for {
		fmt.Printf("%v ", vetor[index])
		if index == len(vetor)-1 {
			break
		}
		index++
	}
}

func q5() {
	var vetor []int
	var l, index, maior int
	for {
		P := obterP()
		if P == 0 {
			break
		}
		fmt.Println("digite os números do vetor")
		for i := 0; i < P; i++ {
			for {
				fmt.Scan(&l)
				if l < 1000 && l > 0 {
					vetor = append(vetor, l)
					break
				}
				fmt.Println("o número deve estar entre 0 e 1000. Tente novamente")
			}
		}
		for i := 0; i <= len(vetor)-1; i++ {
			num := vetor[i]
			if num > maior {
				maior = num
				index = i
			}
		}
		if maior != 0 {
			fmt.Printf("%d %d\n", index, maior)
			maior = 0
			index = 0
		}
	}
}

func obterP() int {
	var P int
	fmt.Println("digite o número N representando o tamanho do vetor")
	fmt.Scanln(&P)
	if P >= 0 && P <= 10000 {
		return P
	}

	fmt.Println("o número deve estar entre 1 e 10000. ")
	return obterP()
}

func q6() {
	var l, soma int
	var vetor []int
	N := obterU()
	fmt.Printf("digite os %d números\n", N)
	for i := 0; i < N; i++ {
		fmt.Scan(&l)
		vetor = append(vetor, l)
		soma += l
	}
	fmt.Println(soma)

}

func q7() {
	var vetor []int
	var maior, l, contador int
	N := obterP()
	fmt.Printf("digite os %d números\n", N)
	for i := 0; i < N; i++ {
		fmt.Scan(&l)
		vetor = append(vetor, l)
		if l > maior {
			maior = l
		}
	}
	for i := 0; i <= maior; i++ {
		contador = 0
		for j := 0; j <= len(vetor)-1; j++ {
			if vetor[j] <= i {
				contador++
			}
		}
		fmt.Printf("(%d) %d\n", i, contador)
	}
}

func q8() {
	var vetor []int
	var dec int
	fmt.Println("digite o decimal")
	fmt.Scanln(&dec)
	for {
		resto := dec % 2
		dec = int(dec / 2)
		vetor = append(vetor, resto)
		if dec == 1 {
			break
		}

	}
	vetor = vetorInverso(vetor)
	fmt.Print(1)
	for i := 0; i <= len(vetor)-1; i++ {
		fmt.Print(vetor[i])
	}
}

func vetorInverso(vetor []int) []int {
	var vetorInverso []int
	index := len(vetor) - 1
	for {
		o := vetor[index]
		vetorInverso = append(vetorInverso, o)
		if index == 0 {
			break
		}
		index--
	}
	return vetorInverso
}

func q9() {
	var N int
	var x, y, z float64
	var sliceMaior [][]float64
	fmt.Println("digite o número N que representa a qtd de pontos")
	for {
		fmt.Scan(&N)
		if N >= 2 && N <= 1000 {
			break
		}
		fmt.Println("o número de pontos deve ser no minimo 2. Tente novamente")
	}
	bufio.NewReader(os.Stdin).ReadByte()
	for i := 0; i < N; i++ {
		fmt.Println("digite as coordenadas (x y z)")
		fmt.Scanln(&x, &y, &z)
		slice := []float64{x, y, z}
		slice = append(slice, x, y, z)
		sliceMaior = append(sliceMaior, slice)
	}
	for i := 0; i < len(sliceMaior)-1; i++ {
		Ponto1 := sliceMaior[i]
		Ponto2 := sliceMaior[i+1]
		distancia := dist2pontos(Ponto1, Ponto2)
		fmt.Printf("%.2f\n", distancia)
	}
}
func dist2pontos(Ponto1, Ponto2 []float64) float64 {
	return math.Sqrt(math.Pow(Ponto2[0]-Ponto1[0], 2) + math.Pow(Ponto2[1]-Ponto1[1], 2) + math.Pow(Ponto2[2]-Ponto1[2], 2))
}

func q10() {
	var N, nota, maior, indice, contador int
	var slice []int
	fmt.Println("digite a quantidade de notas")
	for {
		fmt.Scanln(&N)
		if N >= 0 && N <= 10000 {
			break
		}
		fmt.Println("o número deve estar no intervalo de 0 a 10000")
	}
	for i := 0; i < N; i++ {
		fmt.Scanln(&nota)
		slice = append(slice, nota)
		if nota > maior {
			maior = nota
			indice = i
		}
	}
	ultimo := slice[len(slice)-1]
	for i := 0; i <= len(slice)-1; i++ {
		if ultimo == slice[i] {
			contador++
		}
	}
	fmt.Printf("Nota %d, %d vezes\nNota %d, indice %d", ultimo, contador, maior, indice)
}

func q11() {
	var N, u, maior, menor int
	var slice []int
	fmt.Println("digite o tamanho do vetor")
	for {
		fmt.Scanln(&N)
		if N >= 0 && N <= 1000 {
			break
		}
		fmt.Println("o número deve estar no intervalo de 0 a 1000")
	}
	fmt.Println("digite os valores")
	for i := 0; i < N; i++ {
		fmt.Scanln(&u)
		slice = append(slice, u)
		if u > maior {
			maior = u
			if i == 0 {
				menor = u
			}
		}
		if u < menor {
			menor = u
		}
	}
	fmt.Println(slice)
	inverso := vetorInverso(slice)
	fmt.Println(inverso)
	fmt.Printf("%d\n%d", maior, menor)
}

func q12() {
	var N, l int
	var slice []int
	fmt.Println("insira o número N")
	for {
		fmt.Scanln(&N)
		if N >= 1 && N <= 1000 {
			break
		}
		fmt.Println("o número inserido deve estar contido no intervalo de 1 à 1000")
	}
	fmt.Printf("insira os %d números\n", N)
	for i := 0; i < N; i++ {
		fmt.Scan(&l)
		slice = append(slice, l)
	}

	for i := 0; i < N-1; i++ {
		for j := 0; j < N-1; j++ {
			a := slice[j]
			b := slice[j+1]
			if a > b {
				swap(slice, j, j+1)
			}
		}
	}
	for i := 0; i <= N-1; i++ {
		fmt.Printf("%v\n", slice[i])
	}

}

func swap(slice []int, i, j int) {
	slice[i], slice[j] = slice[j], slice[i]
}

func q13() {
	var N, l, num int
	var vetor []int
	fmt.Println("digite o tamanho do vetor")
	for {
		fmt.Scanln(&N)
		if N >= 1 && N <= 1000000 {
			break
		}
		fmt.Println("o número deve estar no intervalo de 1 a 1000000")
	}
	fmt.Printf("digite os %d números de 0 a 100\n", N)
	maiorFreq := 0
	for i := 0; i < N; i++ {
		fmt.Scan(&l)
		vetor = append(vetor, l)
	}

	for i := 0; i <= len(vetor)-1; i++ {
		freqAtual := 0
		for j := 1; j <= len(vetor)-1; j++ {
			if vetor[i] == vetor[j] {
				freqAtual++
				if freqAtual > maiorFreq {
					num = vetor[i]
					maiorFreq = freqAtual
				}

			}
		}
	}
	fmt.Println()
	fmt.Println(num)
	fmt.Print(maiorFreq)
}

func q14() {
	var N, l int
	var mediana float64
	var slice []int
	fmt.Println("insira o número N")
	for {
		fmt.Scanln(&N)
		if N >= 1 && N <= 1000000 {
			break
		}
		fmt.Println("o número inserido deve estar contido no intervalo de 1 à 1000")
	}
	fmt.Printf("insira os %d números\n", N)
	for i := 0; i < N; i++ {
		fmt.Scan(&l)
		slice = append(slice, l)
	}
	for i := 0; i < N-1; i++ {
		for j := 0; j < N-1; j++ {
			a := slice[j]
			b := slice[j+1]
			if a > b {
				swap(slice, j, j+1)
			}
		}
	}
	index := len(slice) - 1
	a := slice[(index / 2)]
	b := slice[(index/2)+1]
	if len(slice)%2 == 0 {
		mediana = float64(a+b) / 2
		fmt.Printf("%.2f\n", mediana)
	} else {
		fmt.Printf("%.2f", float64(a))
	}

}

func q15() {
	var T, N, l int
	var slice []int

	fmt.Println("insira o número T")
	for {
		fmt.Scanln(&T)
		if T >= 1 && T <= 10 {
			break
		}
		fmt.Println("o número inserido deve estar contido no intervalo de 1 à 10")
	}
	for i := 0; i < T; i++ {
		fmt.Println("insira o número N")
		for {
			fmt.Scanln(&N)
			if N >= 2 && N <= 1000 {
				break
			}
			fmt.Println("o número inserido deve estar contido no intervalo de 2 à 1000")
		}
		fmt.Printf("insira os números\n")
		for i := 0; i < N; i++ {

			for {
				fmt.Scan(&l)
				if l >= -1000 && l <= 1000 {
					break
				}
				fmt.Println("o número inserido deve estar contido no intervalo de -1000 à 1000")
			}
			slice = append(slice, l)
		}
		menorDist := math.MaxFloat64
		for i := 0; i < N; i++ {
			for j := i + 1; j < N; j++ {
				x := math.Abs(float64(slice[i] - slice[j]))
				if math.Abs(x) < menorDist {
					menorDist = math.Abs(x)
				}
			}
		}
		fmt.Println(menorDist)
		min := int(fatorial(N) / (2 * fatorial(N-2)))
		fmt.Println(min)
		slice = nil
		bufio.NewReader(os.Stdin).ReadByte()

	}
}

func fatorial(N int) int {
	if N == 0 {
		return 1
	}
	result := 1
	for i := 1; i <= N; i++ {
		result *= i
	}
	return result
}

func q16() {
	var slice, adiantados []int
	var N, K, l int
	fmt.Println("insira o número N")
	for {
		fmt.Scan(&N)
		if N >= 0 {
			break
		}
		fmt.Println("o número inserido deve ser maior que zero")
	}
	fmt.Println("insira o número K")
	for {
		fmt.Scan(&K)
		if K >= 0 && K <= 1000 {
			break
		}
		fmt.Println("o número inserido deve estar contido no intervalo de 0 à 1000")
	}
	fmt.Println("insira os horários de chegada")
	for i := 0; i < N; i++ {
		fmt.Scan(&l)
		slice = append(slice, l)
	}
	for i := 0; i < len(slice)-1; i++ {
		if slice[i] < 0 {
			adiantados = append(adiantados, slice[i])
		}
	}
	if len(adiantados) < K {
		fmt.Println("SIM")
	} else {
		fmt.Println("NAO")
		j := len(slice) - 1
		for {
			if slice[j] < 0 {
				fmt.Println(j + 1)
			}
			j--
			if j == -1 {
				break
			}
		}
	}
}

func q17() {
	var N, l int
	var slice, temp []int
	fmt.Println("insira o número N")
	for {
		fmt.Scan(&N)
		if N >= 0 && N < 5000 {
			break
		}
		fmt.Println("o número inserido deve ser maior que zero")
	}
	for i := 0; i < N; i++ {
		fmt.Scan(&l)
		slice = append(slice, l)
	}
	p := 0
	for i := 0; i <= len(slice)-1; i++ {
		for j := i + 1; j <= len(slice)-1; j++ {
			if slice[i] == slice[j] {
				p = 1
			}
			if j == len(slice)-1 && p == 0 {
				temp = append(temp, slice[i])
				break
			}
			if j == len(slice)-1 && p == 1 {
				p = 0
				break
			}

		}
	}
	fmt.Println(len(temp) - 1)
}

func q18() {
	var T, soma, e, b1, b2 int
	var lista []int
	fmt.Println("insira o número T")
	fmt.Scan(&T)
	for i := 0; i < T; i++ {
		soma = 0
		lista = nil

		fmt.Println("insira os 11 digitos do cpf")
		for j := 0; j < 11; j++ {
			fmt.Scan(&e)
			lista = append(lista, e)
		}
		for u := 0; u < 9; u++ {
			soma += lista[u] * (u + 1)
		}
		digitob := soma % 11
		if digitob == 10 {
			b1 = 0
		} else {
			b1 = digitob
		}
		h := 9
		soma = 0
		for u := 0; u < 9; u++ {
			soma += lista[u] * (h)
			h--
		}
		digitob = soma % 11
		if digitob == 10 {
			b2 = 0
		} else {
			b2 = digitob
		}
		if lista[9] == b1 && lista[10] == b2 {
			fmt.Println("CPF VALIDO")
		} else {
			fmt.Println("CPF INVALIDO")
		}
	}
}

func q19() {
	var N, l int
	var slice, lista []int
	fmt.Println("insira o número N")
	for {
		fmt.Scan(&N)
		if N >= 0 && N < 1000 {
			break
		}
		fmt.Println("o número inserido deve ser maior que zero")
	}
	for i := 0; i < N; i++ {
		fmt.Scan(&l)
		slice = append(slice, l)
	}
	for i := 0; i <= len(slice)-1; i++ {
		if estaNaLista(slice[i], lista) == false {
			lista = append(lista, slice[i])
		}
	}
	o := 0
	fmt.Println()
	for {
		fmt.Println(lista[o])

		if o == len(lista)-1 {
			break
		}
		o++
	}
}

func estaNaLista(valor int, lista []int) bool {
	for _, v := range lista {
		if v == valor {
			return true
		}
	}
	return false
}

func q20() {
	var N int
	var x, y, z float64
	var sliceMaior [][]float64
	fmt.Println("digite o número N que representa a qtd de pontos")
	for {
		fmt.Scan(&N)
		if N >= 2 && N <= 1000 {
			break
		}
		fmt.Println("o número de pontos deve ser no minimo 2. Tente novamente")
	}
	bufio.NewReader(os.Stdin).ReadByte()
	for i := 0; i < N; i++ {
		fmt.Println("digite as coordenadas (x y z)")
		fmt.Scanln(&x, &y, &z)
		slice := []float64{x, y, z}
		slice = append(slice, x, y, z)
		sliceMaior = append(sliceMaior, slice)
	}
	for i := 0; i < len(sliceMaior)-1; i++ {
		Ponto1 := sliceMaior[i]
		Ponto2 := sliceMaior[i+1]
		modulo := modulo(Ponto1, Ponto2)
		fmt.Printf("%.2f\n", modulo)
	}
}
func modulo(Ponto1, Ponto2 []float64) float64 {
	x := math.Max(Ponto1[0]-Ponto2[0], Ponto1[1]-Ponto2[1])
	return math.Max(x, Ponto1[2]-Ponto2[2])
}

func q21() {
	var N, u int
	var listaPares, listaImpares []int
	fmt.Println("insira um valor inteiro não negativo")
	for {
		fmt.Scan(&N)
		if N >= 0 {
			break
		}
		fmt.Println("o valor inserido não pode ser negativo. Tente novamente")
	}
	fmt.Println("insira os números da lista")
	for i := 0; i < N; i++ {
		fmt.Scan(&u)
		if u%2 == 0 {
			listaPares = append(listaPares, u)
		} else {
			listaImpares = append(listaImpares, u)
		}
	}
	fmt.Println("")
	listaPares = bubbleSort(listaPares)
	for i := 0; i <= len(listaPares)-1; i++ {
		fmt.Println(listaPares[i])
	}
	listaImpares = bubbleSort(listaImpares)
	for i := len(listaImpares) - 1; i >= 0; i-- {
		fmt.Println(listaImpares[i])
	}
}

func bubbleSort(lista []int) []int {
	for i := 0; i < len(lista)-1; i++ {
		for j := 0; j < len(lista)-1; j++ {
			if lista[j] > lista[j+1] {
				swap(lista, j, j+1)
			}
		}
	}
	return lista
}

func q22() {
	var d, n, valor, digitoMax int
	var valorStr string
	var numero []int

	for {
		fmt.Println("insira a qtd de digitos do valor ")
		for {
			fmt.Scan(&d)
			if d >= 0 && d < 100000 {
				break
			}
			fmt.Println("o valor inserido deve estar entre 0 e 100000. Tente novamente")
		}

		if d == 0 {
			break
		}

		fmt.Println("insira a qtd de digitos que deve restar")
		for {
			fmt.Scan(&n)
			if n >= 0 && n < d {
				break
			}
			fmt.Printf("o valor inserido deve estar entre 0 e %d. Tente novamente\n", d)
		}

		fmt.Println("insira o valor")
		for {
			fmt.Scan(&valor)
			valorStr = strconv.Itoa(valor)
			if len(valorStr) == d {
				break
			}
			fmt.Printf("o valor inserido deve ter %d digitos. Tente novamente\n", d)
		}

		u := 0

		for i := 0; i < n; i++ {
			digitoMax = -1
			limite := len(valorStr) - n + 1 + i

			for j := u; j < limite; j++ {
				digito := int(valorStr[j]) - 48
				if digito > digitoMax {
					digitoMax = digito
					u = j + 1
				}
			}
			numero = append(numero, digitoMax)
		}
		for i := 0; i < len(numero); i++ {
			fmt.Print(numero[i])
		}
		numero = nil
		fmt.Println()
	}

}

func q23() {
	stringA, stringB, err := obterStrings()
	if err != nil {
		fmt.Println("erro:", err)
		return
	}

	vogaisA := contarVogais(stringA)
	vogaisB := contarVogais(stringB)
	fmt.Println(vogaisA, vogaisB)
	resultado := distAeB(vogaisA[:], vogaisB[:])
	fmt.Printf("%.2f", resultado)

}

func distAeB(vogaisA, vogaisB []int) float64 {
	var somatorio float64
	for i := 0; i <= 4; i++ {
		somatorio += math.Pow(float64(vogaisA[i]-vogaisB[i]), 2)
	}
	resultado := math.Sqrt(somatorio)
	return resultado

}

func obterStrings() (string, string, error) {
	var entrada string
	reader := bufio.NewScanner(os.Stdin)
	fmt.Println("Digite duas strings separadas por ; (cada uma com no máximo 1000 caracteres):")

	reader.Scan()
	entrada = reader.Text()

	stringsSeparadas := strings.Split(entrada, ";")
	if len(stringsSeparadas) != 2 {
		return "", "", fmt.Errorf("FORMATO INVALIDO!")
	}

	stringA := strings.TrimSpace(stringsSeparadas[0])
	stringB := strings.TrimSpace(stringsSeparadas[1])

	if len(stringA) > 1000 || len(stringB) > 1000 {
		return "", "", fmt.Errorf("cada string deve ter no máximo 1000 caracteres")
	}

	return stringA, stringB, nil
}

func contarVogais(frase string) [5]int {
	vogais := [5]int{0, 0, 0, 0, 0}
	frase = strings.ToLower(frase)

	for _, char := range frase {
		switch char {
		case 'a':
			vogais[0]++
		case 'e':
			vogais[1]++
		case 'i':
			vogais[2]++
		case 'o':
			vogais[3]++
		case 'u':
			vogais[4]++
		}
	}

	return vogais
}
func q24() {
	var N, k int
	var array []int
	for {
		for {
			fmt.Println("insira o tamanho do vetor (0 para encerrar).")
			fmt.Scan(&N)
			if N == 0 {
				break
			}
			if N > 1 && N <= 10000 {
				break
			}
			fmt.Println("o número inserido deve estar entre 1 e 10000. Tente novamente")
		}
		if N == 0 {
			break
		}

		fmt.Printf("insira os %v elementos do vetor.\n", N)
		for i := 0; i < N; i++ {
			fmt.Scan(&k)
			array = append(array, k)
		}
		max := array[0]
		for _, i := range array {
			if i > max {
				max = i
			}
		}
		vetorOrdenado := countingSort(array, max)
		fmt.Println(vetorOrdenado)
		vetorOrdenado = nil
		array = nil

	}
}

func countingSort(array []int, max int) []int {

	vetorOrdenado := make([]int, len(array))
	frequencia := make([]int, max+1)

	for _, numero := range array {
		frequencia[numero]++
	}

	for i := 1; i <= max; i++ {
		frequencia[i] += frequencia[i-1]
	}

	for _, numero := range array {
		vetorOrdenado[frequencia[numero]-1] = numero
		frequencia[numero]--
	}

	return vetorOrdenado
}

func q25() {
	var T, acertos, quina, quadra, sena int
	fmt.Println("insira as 6 dezenas sorteadas")
	dezenasSorteadas, _ := obterDezenas()

	fmt.Println("insira o número de apostas")
	for {
		fmt.Scanln(&T)
		if T >= 1 && T <= 50000 {
			break
		}
		fmt.Println("o número inserido deve estar contido no intervalo de 1 à 50.000")
	}
	for i := 0; i < T; i++ {
		fmt.Println("insira as 6 dezenas")
		dezenas, _ := obterDezenas()
		for i := 0; i < 6; i++ {
			for j := 0; j < 6; j++ {
				if dezenasSorteadas[i] == dezenas[j] {
					acertos++
				}
			}
		}
		if acertos == 4 {
			quadra++
		}
		if acertos == 5 {
			quina++
		}
		if acertos == 6 {
			sena++
		}
		dezenas = nil
		acertos = 0
	}

	if sena != 0 {
		fmt.Printf("Houve %d acertador(es) da sena\n", sena)
	} else {
		fmt.Printf("Nao houve acertador para sena\n")
	}
	if quina != 0 {
		fmt.Printf("Houve %d acertador(es) da quina\n", quina)
	} else {
		fmt.Printf("Nao houve acertador para quina\n")
	}
	if quadra != 0 {
		fmt.Printf("Houve %d acertador(es) da quadra\n", quadra)
	} else {
		fmt.Printf("Nao houve acertador para quadra\n")
	}

}

func obterDezenas() ([]int, error) {
	scanner := bufio.NewScanner(os.Stdin)
	scanner.Scan()
	entrada := scanner.Text()

	dezenasSeparadasStr := strings.Split(entrada, " ")
	if len(dezenasSeparadasStr) != 6 {
		return nil, fmt.Errorf("FORMATO INVALIDO!")
	}
	for i := 0; i < 6; i++ {
		if len(dezenasSeparadasStr[i]) > 2 {
			return nil, fmt.Errorf("cada dezena deve ter no máximo 2 caracteres")
		}
	}

	var dezenasSeparadas []int
	for _, numStr := range dezenasSeparadasStr {
		num, err := strconv.Atoi(strings.TrimSpace(numStr))
		if err != nil {
			return nil, fmt.Errorf("Error converting %q to integer: %v\n", numStr, err)
		}
		dezenasSeparadas = append(dezenasSeparadas, num)
	}
	return dezenasSeparadas, nil
}

func q26() {
	var n, soma int
	fmt.Println("Digite o numero de casos de testes:")

	fmt.Scanln(&n)

	for i := 0; i < n; i++ {

		anoes := make([]int, 9)

		for l := 0; l < 9; l++ {
			fmt.Scanln(&anoes[l])
		}
		sort.Ints(anoes)

		for j := 0; j < len(anoes); j++ {

			for k := j + 1; k < len(anoes); k++ {
				soma = somar(anoes)
				if (soma - anoes[j] - anoes[k]) == 100 {

					printAnoesExcept(anoes, j, k)

				}

			}
		}

	}

}

func somar(x []int) int {

	soma := 0
	for _, valor := range x {

		soma += valor
	}

	return soma

}

func printAnoesExcept(anoes []int, impostor1, impostor2 int) {
	for i, valor := range anoes {
		if i != impostor1 && i != impostor2 {
			fmt.Println(valor)
		}
	}
}

func q27() {
	var q1, q2 int
	fmt.Println("Digite o tamanho da sequencia 1:")
	fmt.Scanln(&q1)
	fmt.Println("Digite o tamanho da sequencia 2:")
	fmt.Scanln(&q2)

	slice1 := make([]int, q1)
	slice2 := make([]int, q2)

	for i := 0; i < q1; i++ {
		fmt.Scanln(&slice1[i])
	}
	for i := 0; i < q2; i++ {
		fmt.Scanln(&slice2[i])
	}
	crescente(slice1)
	crescente(slice2)
	fmt.Println("----------------")
	j := 0
	k := 0
	continuar := true
	for continuar {

		if j < len(slice1) && (k >= len(slice2) || slice1[j] < slice2[k]) {
			fmt.Println(slice1[j])
			j++
			if j == len(slice1) && k == len(slice2) {
				continuar = false
			}
			continue
		} else if k < len(slice2) {
			fmt.Println(slice2[k])
			k++
			if k == len(slice2) && j == len(slice1) {
				continuar = false
			}
			continue
		}

	}

}

func crescente(vetor []int) []int {
	var n int
	for i := 1; i < n; i++ {

		for j := 0; j < n; j++ {

			if vetor[j] > vetor[i] {

				vetor[j], vetor[i] = vetor[i], vetor[j]

			}

		}

	}
	return vetor

}

func q28() {

}
